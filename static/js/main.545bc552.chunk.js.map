{"version":3,"sources":["static/images/Duke.png","static/images/Contessa.png","static/images/Captain.png","static/images/Assassin.png","static/images/Ambassador.png","static/images/Back.png","serviceWorker.js","static/cards.js","components/Card/Card.js","components/Actions.js","components/ActionChoices.js","components/Player.js","components/Board.js","components/App.js","components/Menu.js","components/Router.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","cards","image","duke","name","description","isShown","contessa","captain","assassin","ambassador","Card","_this$props","this","props","react_default","a","createElement","className","alt","src","cardBack","Component","Actions","onClick","handleCoup","getIncome","handleForeignAid","ActionChoices","renderBlockButton","renderCardChoiceButton","Player","concat","position","currentTurn","isBot","text","renderCard","playerIndex","getCoins","Board","components_Player","components_ActionChoices","Coup","state","deck","_this","createDeck","players","toShowBlockChoice","toShowCardChoice","drawCards","noOfCards","Object","toConsumableArray","drawnCards","Array","from","map","index","Math","floor","random","length","card","splice","setState","createPlayers","player","i","coin","hand","slice","components_Card_Card","activePlayer","getForeignAid","toCoup","cardIndex","activeIndex","targetIndex","targetPlayer","toBlock","j","push","objectSpread","isBotTurn","components_Actions","components_Board","Menu","newRoom","existingRoom","joinRoom","event","preventDefault","handleChange","defineProperty","currentTarget","value","onSubmit","type","placeholder","Router","BrowserRouter","Switch","Route","exact","path","component","App","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+LCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sOCZSC,EAAA,CACb,CACEC,MAAOC,IACPC,KAAM,OACNC,YAAa,wDACbC,SAAS,GAEX,CACEJ,MAAOK,IACPH,KAAM,WACNC,YAAa,uBACbC,SAAS,GAEX,CACEJ,MAAOM,IACPJ,KAAM,UACNC,YAAa,6DACbC,SAAS,GAEX,CACEJ,MAAOO,IACPL,KAAM,WACNC,YAAa,yDACbC,SAAS,GAEX,CACEJ,MAAOQ,IACPN,KAAM,aACNC,YAAa,6DACbC,SAAS,qBCFEK,mLArBJ,IAAAC,EACuCC,KAAKC,MAA3CR,EADDM,EACCN,QAASF,EADVQ,EACUR,KAAMF,EADhBU,EACgBV,MAAOG,EADvBO,EACuBP,YAC9B,OAAgB,IAAZC,EAEAS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,IAAKf,EAAMgB,IAAKlB,IACvCa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAad,GAC5BW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeb,KAMpCU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAI,YAAYC,IAAKC,cAvB3CC,aCyBJC,mLAlBX,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASM,QAASX,KAAKC,MAAMW,YAA/C,QAGAV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASM,QAASX,KAAKC,MAAMY,WAA/C,UAGAX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASM,QAASX,KAAKC,MAAMa,kBAA/C,wBAjBYL,aCWPM,mLATX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZL,KAAKC,MAAMe,oBACXhB,KAAKC,MAAMgB,iCALQR,aCsBbS,mLApBX,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,cAAAc,OAAgBnB,KAAKC,MAAMmB,WACvClB,EAAAC,EAAAC,cAAA,OACEC,UAAS,cAAAc,OACPnB,KAAKC,MAAMmB,SADJ,KAAAD,OAELnB,KAAKC,MAAMoB,YAAYrB,KAAKC,MAAMqB,SAErCtB,KAAKC,MAAMsB,MAEdrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZL,KAAKC,MAAMuB,WAAWxB,KAAKC,MAAMwB,cAEpCvB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,cAAAc,OAAgBnB,KAAKC,MAAMmB,WACtCpB,KAAKC,MAAMyB,SAAS1B,KAAKC,MAAMwB,sBAfrBhB,aC4CNkB,mLA/BX,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACwB,EAAD,CACER,SAAS,QACTE,MAAOtB,KAAKC,MAAMqB,MAClBD,YAAarB,KAAKC,MAAMoB,YACxBE,KAAK,MACLE,YAAa,EACbD,WAAYxB,KAAKC,MAAMuB,WACvBE,SAAU1B,KAAKC,MAAMyB,WAGvBxB,EAAAC,EAAAC,cAACyB,EAAD,CACEb,kBAAmBhB,KAAKC,MAAMe,kBAC9BC,uBAAwBjB,KAAKC,MAAMgB,yBAGrCf,EAAAC,EAAAC,cAACwB,EAAD,CACER,SAAS,MACTE,OAAQtB,KAAKC,MAAMqB,MACnBD,YAAarB,KAAKC,MAAMoB,YACxBE,KAAK,SACLE,YAAa,EACbD,WAAYxB,KAAKC,MAAMuB,WACvBE,SAAU1B,KAAKC,MAAMyB,mBAnCXjB,aCsNLqB,6MAnNbC,MAAQ,CACNC,KAAMC,EAAKC,aACXC,QAAS,GACTb,OAAO,EACPc,mBAAmB,EACnBC,kBAAkB,KAkBpBC,UAAY,SAAAC,GACV,IAAMP,EAAIQ,OAAAC,EAAA,EAAAD,CAAOP,EAAKF,MAAMC,MACtBU,EAAaC,MAAMC,KAAKD,MAAMJ,GAAY,kBAAM,OAAMM,IAAI,WAC9D,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWjB,EAAKkB,QACxCC,EAAOnB,EAAKc,GAElB,OADAd,EAAKoB,OAAON,EAAO,GACZK,IAGT,OADAlB,EAAKoB,SAAS,CAAErB,SACTU,KAGTY,cAAgB,SAAAZ,GACd,IAAMP,EAAUQ,MAAMC,KAAKD,MAAM,GAAI,kBAAM,OAAME,IAAI,SAACU,EAAQC,GAC5D,MAAO,CACLC,KAAM,EACNC,KAAMhB,EAAWiB,MAAU,EAAJH,EAAW,EAAJA,EAAQ,MAG1CvB,EAAKoB,SAAS,CAAElB,eAGlBX,WAAa,SAAAC,GACX,OAAkC,IAA9BQ,EAAKF,MAAMI,QAAQe,OACd,KAEIV,OAAAC,EAAA,EAAAD,CAAOP,EAAKF,MAAMI,SACJV,GAAaiC,KACtBb,IAAI,SAAAM,GAAI,OAAIjD,EAAAC,EAAAC,cAACwD,EAAST,QAG1CtC,UAAY,WACV,IAAMsB,EAAOK,OAAAC,EAAA,EAAAD,CAAOP,EAAKF,MAAMI,SACzBW,EAAQb,EAAKF,MAAMT,MAAQ,EAAI,EAC/BuC,EAAe1B,EAAQW,GACzBe,EAAaJ,KAAO,KACtBI,EAAaJ,MAAQ,EACrBtB,EAAQiB,OAAON,EAAO,EAAGe,IAE3B5B,EAAKoB,SAAS,CACZ/B,OAAQW,EAAKF,MAAMT,MACnBc,mBAAmB,EACnBC,kBAAkB,EAClBF,eAIJrB,iBAAmB,WACjBmB,EAAKoB,SAAS,CACZjB,mBAAmB,EACnBC,kBAAkB,OAItByB,cAAgB,WACd,IAAM3B,EAAOK,OAAAC,EAAA,EAAAD,CAAOP,EAAKF,MAAMI,SACzBW,EAAQb,EAAKF,MAAMT,MAAQ,EAAI,EAC/BuC,EAAe1B,EAAQW,GACzBe,EAAaJ,KAAO,KAClBI,EAAaJ,MAAQ,EAAGI,EAAaJ,MAAQ,EAC5CI,EAAaJ,MAAQ,EAC1BtB,EAAQiB,OAAON,EAAO,EAAGe,IAE3B5B,EAAKoB,SAAS,CACZ/B,OAAQW,EAAKF,MAAMT,MACnBc,mBAAmB,EACnBD,eAIJvB,WAAa,WACX,IAEMiD,EAFOrB,OAAAC,EAAA,EAAAD,CAAOP,EAAKF,MAAMI,SACjBF,EAAKF,MAAMT,MAAQ,EAAI,GAEjCuC,EAAaJ,KAAO,EACtBxB,EAAKoB,SAAS,CACZjB,mBAAmB,IAEZyB,EAAaJ,MAAQ,GAC9BxB,EAAKoB,SAAS,CACZhB,kBAAkB,EAClBD,mBAAmB,OAKzB2B,OAAS,SAAAC,GACP,IAAM7B,EAAOK,OAAAC,EAAA,EAAAD,CAAOP,EAAKF,MAAMI,SAEzB8B,EAAchC,EAAKF,MAAMT,MAAQ,EAAI,EACrC4C,EAAcjC,EAAKF,MAAMT,MAAQ,EAAI,EAErCuC,EAAe1B,EAAQ8B,GACvBE,EAAehC,EAAQ+B,GAEzBL,EAAaJ,KAAO,IAGxBI,EAAaJ,MAAQ,EACrBU,EAAaT,KAAKM,GAAWvE,SAAU,EACvC0C,EAAQiB,OAAOa,EAAa,EAAGJ,GAC/B1B,EAAQiB,OAAOc,EAAa,EAAGC,GAC/BlC,EAAKoB,SAAS,CACZ/B,OAAQW,EAAKF,MAAMT,MACnBe,kBAAkB,EAClBF,gBAIJiC,QAAU,WACRnC,EAAKoB,SAAS,CACZ/B,OAAQW,EAAKF,MAAMT,MACnBc,mBAAmB,OAIvBpB,kBAAoB,WAClB,OACmC,IAAjCiB,EAAKF,MAAMK,oBACqB,IAAhCH,EAAKF,MAAMM,iBAEJ,KAGPnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASM,QAASsB,EAAKmC,SAAzC,SAGAlE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASM,QAASsB,EAAK6B,eAAzC,YAON7C,uBAAyB,WACvB,OACkC,IAAhCgB,EAAKF,MAAMM,mBACsB,IAAjCJ,EAAKF,MAAMK,kBAEJ,KAGPlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASM,QAAS,kBAAMsB,EAAK8B,OAAO,KAAtD,UAGA7D,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASM,QAAS,kBAAMsB,EAAK8B,OAAO,KAAtD,cAWNrC,SAAW,SAAAD,GACT,OAAkC,IAA9BQ,EAAKF,MAAMI,QAAQe,OACd,KAEIV,OAAAC,EAAA,EAAAD,CAAOP,EAAKF,MAAMI,SAChBV,GAAagC,KAAO,8FAjLnC,IAAMf,EAAa1C,KAAKsC,UAAU,GAClCtC,KAAKsD,cAAcZ,wCAKnB,IADA,IAAMV,EAAO,GACJwB,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIa,EAAI,EAAGA,EAAI,EAAGA,IACrBrC,EAAKsC,KAAL9B,OAAA+B,EAAA,EAAA/B,CAAA,GAAepD,EAAMoE,KAGzB,OAAOxB,sCA6JGwC,GACV,OAAOA,EAAY,YAAc,6CAYjC,OACEtE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqE,EAAD,CACE7D,WAAYZ,KAAKY,WACjBC,UAAWb,KAAKa,UAChBC,iBAAkBd,KAAKc,mBAGzBZ,EAAAC,EAAAC,cAACsE,EAAD,CACEpD,MAAOtB,KAAK+B,MAAMT,MAClBD,YAAarB,KAAKqB,YAClBG,WAAYxB,KAAKwB,WACjBE,SAAU1B,KAAK0B,SACfV,kBAAmBhB,KAAKgB,kBACxBC,uBAAwBjB,KAAKiB,iCA7MpBR,qBCyCJkE,6MA5Cb5C,MAAQ,CACN6C,QAAS,KACTC,aAAc,QAOhBC,SAAW,SAAAC,GACTA,EAAMC,oBAIRC,aAAe,SAAAF,GACb9C,EAAKoB,SAALb,OAAA0C,EAAA,EAAA1C,CAAA,GACGuC,EAAMI,cAAc5F,KAAOwF,EAAMI,cAAcC,iFAKlD,OACElF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAlB,gBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMiF,UAAQ,GACZnF,EAAAC,EAAAC,cAAA,SACEC,UAAU,aACViF,KAAK,OACL/F,KAAK,eACLgG,YAAY,6BAEdrF,EAAAC,EAAAC,cAAA,UAAQkF,KAAK,SAASjF,UAAU,UAAhC,uBAnCOI,aCWJ+E,EATA,kBACbtF,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KACEvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,KACExF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjCzE,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWC,OCH1CC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAAYC,SAASC,eAAe,SV2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.545bc552.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Duke.fb0ceeed.png\";","module.exports = __webpack_public_path__ + \"static/media/Contessa.6b0115d0.png\";","module.exports = __webpack_public_path__ + \"static/media/Captain.6cc57e5c.png\";","module.exports = __webpack_public_path__ + \"static/media/Assassin.3c08f807.png\";","module.exports = __webpack_public_path__ + \"static/media/Ambassador.e1d61479.png\";","module.exports = __webpack_public_path__ + \"static/media/Back.c80ea369.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import duke from \"./images/Duke.png\";\nimport contessa from \"./images/Contessa.png\";\nimport captain from \"./images/Captain.png\";\nimport assassin from \"./images/Assassin.png\";\nimport ambassador from \"./images/Ambassador.png\";\n\nexport default [\n  {\n    image: duke,\n    name: \"Duke\",\n    description: \"TAX: Takes 3 coins from Treasury + Blocks Foreign Aid\",\n    isShown: false\n  },\n  {\n    image: contessa,\n    name: \"Contessa\",\n    description: \"Blocks assassination\",\n    isShown: false\n  },\n  {\n    image: captain,\n    name: \"Captain\",\n    description: \"STEAL: Steal 2 coins from another player + Blocks stealing\",\n    isShown: false\n  },\n  {\n    image: assassin,\n    name: \"Assassin\",\n    description: \"ASSASSINATE: Pay 3 coins to assassinate another player\",\n    isShown: false\n  },\n  {\n    image: ambassador,\n    name: \"Ambassador\",\n    description: \"EXCHANGE: Exchange cards with Court Deck + Blocks stealing\",\n    isShown: false\n  }\n];\n\n/* const players = \n\nconst getPlayer = () => {\n  players\n}\n\nexport default { players, getPlayer } */","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cardBack from \"../../static/images/Back.png\";\n\nclass Card extends Component {\n  static propTypes = {\n    isShown: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired\n  };\n\n  render() {\n    const { isShown, name, image, description } = this.props;\n    if (isShown === true) {\n      return (\n        <div className=\"card-holder\">\n          <img className=\"cards\" alt={name} src={image} />\n          <div className=\"description\">\n            <div className=\"card-name\">{name}</div>\n            <div className=\"description\">{description}</div>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"card-holder\">\n        <img className=\"cards card-back\" alt=\"Card Back\" src={cardBack} />\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Actions extends Component {\n  static propTypes = {\n    handleCoup: PropTypes.func.isRequired,\n    getIncome: PropTypes.func.isRequired,\n    handleForeignAid: PropTypes.func.isRequired\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"actions\">\n          <button className=\"button\" onClick={this.props.handleCoup}>\n            Coup\n          </button>\n          <button className=\"button\" onClick={this.props.getIncome}>\n            Income\n          </button>\n          <button className=\"button\" onClick={this.props.handleForeignAid}>\n            Foreign Aid\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Actions;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ActionChoices extends Component {\n  render() {\n    return (\n      <div className=\"action-choices\">\n        {this.props.renderBlockButton()}\n        {this.props.renderCardChoiceButton()}\n      </div>\n    );\n  }\n}\n\nexport default ActionChoices;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Player extends Component {\n  render() {\n    return (\n      <div className={`board-item ${this.props.position}`}>\n        <div\n          className={`name right ${\n            this.props.position\n          } ${this.props.currentTurn(this.props.isBot)}`}\n        >\n          {this.props.text}\n        </div>\n        <div className=\"player-cards\">\n          {this.props.renderCard(this.props.playerIndex)}\n        </div>\n        <div className={`left coins ${this.props.position}`}>\n          {this.props.getCoins(this.props.playerIndex)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ActionChoices from \"./ActionChoices\";\nimport Player from \"./Player\";\n\nclass Board extends Component {\n  static propTypes = {\n    isBot: PropTypes.bool.isRequired,\n    currentTurn: PropTypes.func.isRequired,\n    renderCard: PropTypes.func.isRequired,\n    getCoins: PropTypes.func.isRequired,\n    renderBlockButton: PropTypes.func.isRequired,\n    renderCardChoiceButton: PropTypes.func.isRequired\n  };\n\n  render() {\n    return (\n      <div className=\"board\">\n        <Player\n          position=\"start\"\n          isBot={this.props.isBot}\n          currentTurn={this.props.currentTurn}\n          text=\"Bot\"\n          playerIndex={1}\n          renderCard={this.props.renderCard}\n          getCoins={this.props.getCoins}\n        />\n\n        <ActionChoices\n          renderBlockButton={this.props.renderBlockButton}\n          renderCardChoiceButton={this.props.renderCardChoiceButton}\n        />\n\n        <Player\n          position=\"end\"\n          isBot={!this.props.isBot}\n          currentTurn={this.props.currentTurn}\n          text=\"Player\"\n          playerIndex={0}\n          renderCard={this.props.renderCard}\n          getCoins={this.props.getCoins}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport cards from \"../static/cards\";\nimport Card from \"./Card/Card\";\nimport Actions from \"./Actions\";\nimport Board from \"./Board\";\n\nclass Coup extends Component {\n  state = {\n    deck: this.createDeck(),\n    players: [],\n    isBot: false,\n    toShowBlockChoice: false,\n    toShowCardChoice: false\n  };\n\n  componentWillMount() {\n    const drawnCards = this.drawCards(4);\n    this.createPlayers(drawnCards);\n  }\n\n  createDeck() {\n    const deck = [];\n    for (let i = 0; i < 5; i++) {\n      for (let j = 0; j < 3; j++) {\n        deck.push({ ...cards[i] });\n      }\n    }\n    return deck;\n  }\n\n  drawCards = noOfCards => {\n    const deck = [...this.state.deck];\n    const drawnCards = Array.from(Array(noOfCards), () => null).map(() => {\n      const index = Math.floor(Math.random() * deck.length);\n      const card = deck[index];\n      deck.splice(index, 1);\n      return card;\n    });\n    this.setState({ deck });\n    return drawnCards;\n  };\n\n  createPlayers = drawnCards => {\n    const players = Array.from(Array(2), () => null).map((player, i) => {\n      return {\n        coin: 2,\n        hand: drawnCards.slice(i * 2, i * 2 + 2)\n      };\n    });\n    this.setState({ players });\n  };\n\n  renderCard = playerIndex => {\n    if (this.state.players.length === 0) {\n      return null;\n    }\n    const players = [...this.state.players];\n    const playerHand = players[playerIndex].hand;\n    return playerHand.map(card => <Card {...card} />);\n  };\n\n  getIncome = () => {\n    const players = [...this.state.players];\n    const index = this.state.isBot ? 1 : 0;\n    const activePlayer = players[index];\n    if (activePlayer.coin < 10) {\n      activePlayer.coin += 1;\n      players.splice(index, 1, activePlayer);\n    }\n    this.setState({\n      isBot: !this.state.isBot,\n      toShowBlockChoice: false,\n      toShowCardChoice: false,\n      players\n    });\n  };\n\n  handleForeignAid = () => {\n    this.setState({\n      toShowBlockChoice: true,\n      toShowCardChoice: false\n    });\n  };\n\n  getForeignAid = () => {\n    const players = [...this.state.players];\n    const index = this.state.isBot ? 1 : 0;\n    const activePlayer = players[index];\n    if (activePlayer.coin < 10) {\n      if (activePlayer.coin <= 8) activePlayer.coin += 2;\n      else activePlayer.coin += 1;\n      players.splice(index, 1, activePlayer);\n    }\n    this.setState({\n      isBot: !this.state.isBot,\n      toShowBlockChoice: false,\n      players\n    });\n  };\n\n  handleCoup = () => {\n    const players = [...this.state.players];\n    const index = this.state.isBot ? 1 : 0;\n    const activePlayer = players[index];\n    if (activePlayer.coin < 7) {\n      this.setState({\n        toShowBlockChoice: false\n      });\n    } else if (activePlayer.coin >= 7) {\n      this.setState({\n        toShowCardChoice: true,\n        toShowBlockChoice: false\n      });\n    }\n  };\n\n  toCoup = cardIndex => {\n    const players = [...this.state.players];\n\n    const activeIndex = this.state.isBot ? 1 : 0;\n    const targetIndex = this.state.isBot ? 0 : 1;\n\n    const activePlayer = players[activeIndex];\n    const targetPlayer = players[targetIndex];\n\n    if (activePlayer.coin < 7) {\n      return;\n    }\n    activePlayer.coin -= 7;\n    targetPlayer.hand[cardIndex].isShown = true;\n    players.splice(activeIndex, 1, activePlayer);\n    players.splice(targetIndex, 1, targetPlayer);\n    this.setState({\n      isBot: !this.state.isBot,\n      toShowCardChoice: false,\n      players\n    });\n  };\n\n  toBlock = () => {\n    this.setState({\n      isBot: !this.state.isBot,\n      toShowBlockChoice: false\n    });\n  };\n\n  renderBlockButton = () => {\n    if (\n      this.state.toShowBlockChoice === false ||\n      this.state.toShowCardChoice === true\n    ) {\n      return null;\n    }\n    return (\n      <div className=\"block-button\">\n        <button className=\"button\" onClick={this.toBlock}>\n          Block\n        </button>\n        <button className=\"button\" onClick={this.getForeignAid}>\n          Pass\n        </button>\n      </div>\n    );\n  };\n\n  renderCardChoiceButton = () => {\n    if (\n      this.state.toShowCardChoice === false ||\n      this.state.toShowBlockChoice === true\n    ) {\n      return null;\n    }\n    return (\n      <div className=\"card-choice-button\">\n        <button className=\"button\" onClick={() => this.toCoup(0)}>\n          Card 1\n        </button>\n        <button className=\"button\" onClick={() => this.toCoup(1)}>\n          Card 2\n        </button>\n      </div>\n    );\n  };\n\n  currentTurn(isBotTurn) {\n    return isBotTurn ? \"text-bold\" : \"text-fade\";\n  }\n\n  getCoins = playerIndex => {\n    if (this.state.players.length === 0) {\n      return null;\n    }\n    const players = [...this.state.players];\n    return players[playerIndex].coin + \" Coins\";\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Actions\n          handleCoup={this.handleCoup}\n          getIncome={this.getIncome}\n          handleForeignAid={this.handleForeignAid}\n        />\n\n        <Board\n          isBot={this.state.isBot}\n          currentTurn={this.currentTurn}\n          renderCard={this.renderCard}\n          getCoins={this.getCoins}\n          renderBlockButton={this.renderBlockButton}\n          renderCardChoiceButton={this.renderCardChoiceButton}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Coup;\n\n/* var flattenObject = function(ob) {\n  var toReturn = {};\n  for (var i in ob) {\n    if (!ob.hasOwnProperty(i)) continue;\n    if ((typeof ob[i]) == 'object') {\n      var flatObject = flattenObject(ob[i]);\n      for (var x in flatObject) {\n        if (!flatObject.hasOwnProperty(x)) continue;\n        toReturn[i + '.' + x] = flatObject[x];\n      }\n    } else {\n      toReturn[i] = ob[i];\n    }\n  }\n  return toReturn;\n\n\n  function load(configFile, callback) {\n    if (!fs.existsSync(configFile))\n    {\n      throw new Error(\"Unable to find configuration file from \" + configFile);\n    }\n\n    var data = fs.readFileSync(configFile);\n    var conf = JSON.parse(data);\n    _.extend(this.config, conf);\n\n    callback(conf);\n  }\n\n\n\nWhich code snippet has better rendering performance?\n\nA:\n\n.nav {\n    left: -250px;\n    transition: left 300ms linear;\n}\n\n.nav--open {\n    left: 0px;\n    transition: left 300ms linear;\n}\nB:\n\n.nav {\n    transform: translateX(-250px);\n    transition: transform 300ms linear;\n}\n\n.nav--open {\n    transform: none;\n    transition: transform 300ms linear;\n}\n}; */\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Menu extends Component {\n  state = {\n    newRoom: null,\n    existingRoom: null\n  };\n\n  static propTypes = {\n    prop: PropTypes\n  };\n\n  joinRoom = event => {\n    event.preventDefault();\n    // this.props.history.push(`${}`)\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.currentTarget.name]: event.currentTarget.value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"menu\">\n        <div className=\"room-create\">\n          <button className=\"button\">Create Room</button>\n        </div>\n        <div className=\"room-join\">\n          <form onSubmit>\n            <input\n              className=\"room-input\"\n              type=\"text\"\n              name=\"existingRoom\"\n              placeholder=\"Enter existing room name\"\n            />\n            <button type=\"submit\" className=\"button\">\n              Join Room\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Menu;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport App from \"./App\";\nimport Menu from \"./Menu\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Menu} />\n      <Route path=\"/:roomName\" component={App} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Router from \"./components/Router\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}